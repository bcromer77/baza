const mongoose = require('mongoose');

const PricingSchema = new mongoose.Schema({
  hotelId: {
    type: String,
    required: true,
    index: true,
    description: 'Unique identifier for the hotel (e.g., from Apollo API)'
  },
  eventId: {
    type: String,
    required: true,
    index: true,
    description: 'Unique identifier for the event (e.g., 
lisbon-triathlon-2025)'
  },
  baseRate: {
    type: Number,
    required: true,
    select: false,
    description: 'Hotel base rate from Apollo API (e.g., $90)'
  },
  prismMargin: {
    type: Number,
    required: true,
    select: false,
    description: 'Prism’s margin (e.g., $15)'
  },
  prismSellPrice: {
    type: Number,
    required: true,
    description: 'Price Prism sells to influencer (e.g., $105)'
  },
  influencerSellPrice: {
    type: Number,
    required: true,
    description: 'Price influencer sells to fan (e.g., $120)'
  },
  influencerMargin: {
    type: Number,
    required: true,
    description: 'Influencer’s margin (e.g., $15)'
  },
  currency: {
    type: String,
    required: true,
    default: 'USD',
    enum: ['USD', 'EUR', 'GBP'],
    description: 'Currency for pricing'
  },
  createdAt: {
    type: Date,
    default: Date.now,
    description: 'Timestamp when pricing record was created'
  },
  updatedAt: {
    type: Date,
    default: Date.now,
    description: 'Timestamp when pricing record was last updated'
  }
});

PricingSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

PricingSchema.statics.createPricing = async function(hotelId, eventId, 
baseRate) {
  const prismMargin = baseRate * 0.1667;
  const prismSellPrice = baseRate + prismMargin;
  const influencerSellPrice = prismSellPrice + (prismSellPrice * 0.1429);
  const influencerMargin = influencerSellPrice - prismSellPrice;

  const pricing = new this({
    hotelId,
    eventId,
    baseRate,
    prismMargin,
    prismSellPrice,
    influencerSellPrice,
    influencerMargin
  });

  await pricing.save();
  return pricing;
};

PricingSchema.statics.findInfluencerPricing = async function(hotelId, 
eventId) {
  return await this.findOne({ hotelId, eventId })
    .select('prismSellPrice influencerSellPrice influencerMargin hotelId 
eventId currency')
    .lean();
};

PricingSchema.index({ hotelId: 1, eventId: 1 });

module.exports = mongoose.model('Pricing', PricingSchema);

